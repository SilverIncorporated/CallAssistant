@using CallAssistant.ViewModels.Orchestrator
@using System.Collections.Generic
@using System.Linq
@using CallAssistant.Helpers
@using CallAssistant.ViewModels.Config
@using CallAssistant.ViewModels.Robot

@page "/orchestrator"

@inject IOrchestratorAPI _OrchestratorAPI
@inject IJSRuntime _jsRuntime
@inject IConfiguration config


<h2 class="text-light">Orchestrator Connection</h2>
<hr class="bg-white" />

<div class="d-flex flex-wrap justify-content-start">

    <InputText @bind-Value="FolderFilter" @onkeypress="@Enter"></InputText>

    @if(Folders != null)
    {
        @foreach (var folder in Folders)
        {
            <div class="border border-secondary m-2 p-2 card bg-success text-light d-flex flex-row" @onclick="() => GetProcesses(folder)">
                <div class="p-2 align-middle"><span class="align-middle oi oi-media-play text-white align-middle"></span></div>
                <div class="p-2 align-middle"><a> @folder.DisplayName</a></div>
            </div>
        }
    }
</div>

<div class="d-flex flex-wrap justify-content-start">
    @if (Processes != null)
    {
        @foreach (var process in Processes)
        {
            <div class="border border-secondary m-2 p-2 card bg-primary text-light d-flex flex-row" @onclick="() => SelectProcess(process)">
                <div class="p-2 align-middle"><span class="align-middle oi oi-media-play text-white align-middle"></span></div>
                <div class="p-2 align-middle"><a> @process.Name</a></div>
            </div>
        }
    }
</div>

@if(selectedProcess != null)
{
    <table>
        <tr>
            <td>Process</td>
            <td>@selectedProcess.Name</td>
        </tr>
        <tr>
            <td>Description</td>
            <td>@selectedProcess.Description</td>
        </tr>
        <tr>
            <td>InArgs</td>
            <td>@selectedProcess.InArguments</td>
        </tr>
        <tr>
            <td>OutArgs</td>
            <td>@selectedProcess.OutArguments</td>
        </tr>
    </table>
}


@code {
    IEnumerable<FolderDto> Folders { get; set; }
    IEnumerable<ProcessDto> Processes { get; set; }
    ProcessDto selectedProcess { get; set; }

    CallSocketHelper SocketHelper { get; set; }

    string FolderFilter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            SocketHelper = new CallSocketHelper(_jsRuntime, ConfigRouter.GetVar("CALL_SERVER_URL", config), new Action[]{StateHasChanged}, functionCall);
            await SocketHelper.StartSocket();
            Folders = await _OrchestratorAPI.GetFolders(FolderFilter);
            StateHasChanged();
        }

    }

    async void functionCall(FunctionCall fc)
    {

    }

    async void GetProcesses(FolderDto folder)
    {
        Processes = await _OrchestratorAPI.GetProcesses(folder);
        StateHasChanged();
    }

    async void SelectProcess(ProcessDto process)
    {
        selectedProcess = process;
        StateHasChanged();
        await SocketHelper.RegisterFunction(process);
    }

    public async void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Folders = await _OrchestratorAPI.GetFolders(FolderFilter);
            StateHasChanged();
        }
        else
        {
            
        }
    }
}
